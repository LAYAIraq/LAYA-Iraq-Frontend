# Contributing to LAYA

We are open to contributors! Please feel free to tackle an issue in
the issues list. We are especially grateful for contributors who can
add missing translations to our localization files.

## Coding Style

In order to be consistent in our code, we need to implement certain
standards. We are complying to Vue's Coding Standards in the standard
js flavor. Linting your code will give you an idea of which rules to
apply.

We furthermore use some custom styling as explained below.

### Consistent function declarations

We use shorthand function declarations for our properties. Instead of:

```javascript
<script>
    export default {
        data: function() {
            return {
                ...
            }
        }
    }
</script>

```

We write:


```javascript
<script>
    export default {
        data () {
            return {
                ...
            }
        }
    }
</script>

```

For inline functions, we use the arrow syntax: instead of

```javascript
someFunction = function(name, space) { ... }
```

we write

```javascript
someFunction = (name, space) => { ... }
```

### Type type annotations

In our TypeScript files (such as store modules), we use extensive type
annotation. As a general rule, the type should be declared as
meticulously as possible. Unless we are actually accepting different
argument types, the type annotation should never be `any`.

Good:

``` typescript
someFunction (argument: object)
```

Bad:

``` typescript
someFunction (argument)
```

When we are handling complex data types, the declaration needs to be
nested. For deeper nesting, we use line breaks to increase
readability. For multiple arguments, every arguments needs to start
at a new line.

Good:

``` typescript
someFunction (argument: { id: string })
```

``` typescript
someFunction (
  argument: {
    id: string,
    message: string
  })
```

Bad:

``` typescript
someFunction (argument{ id: string, message: string })
```

Good:

``` typescript
someFunction (
  argument: Array <
    { id: number }
  >
)
```

Bad:
``` typescript
someFunction (argument: Array<object>)
```
